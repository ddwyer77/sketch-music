rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is an admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }

    // Helper function to check if user is a creator
    function isCreator() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['creator']);
    }

    // Helper function to check if user is an owner
    function isOwner() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['owner']);
    }

    // Campaign rules
    match /campaigns/{campaignId} {
      // Anyone can read campaigns
      allow read: if true;
      // Only authenticated users can write to campaigns
      allow write: if request.auth != null;
    }

    // Campaign archive rules
    match /campaigns_archive/{campaignId} {
      // Only admins can read and write to archived campaigns
      allow read, write: if isAdmin();
    }

    // User rules
    match /users/{userId} {
      // Allow users to create their own document during signup
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Basic user data is readable by authenticated users
      allow read: if isAuthenticated();
      
      // Users can update their own document
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Only owners can read and write to the roles field
      allow read: if isAuthenticated() && (
        // If reading roles field, must be owner
        !('roles' in request.resource.data) || isOwner()
      );
      
      allow update: if isAuthenticated() && (
        // If updating roles field, must be owner
        !('roles' in request.resource.data) || isOwner()
      );
    }

    // Videos subcollection rules
    match /campaigns/{campaignId}/videos/{videoId} {
      allow read: if isAuthenticated();
      allow create: if isCreator();
      allow update: if isCreator() || isAdmin();
      allow delete: if isAdmin();
    }

    // Discord token rules
    match /discord_login_tokens/{token} {
      allow read: if true;
      allow delete, update: if request.auth != null;
      allow create: if false;
    }

    // Server rules
    match /servers/{serverId} {
      // Allow any authenticated user to read all servers
      allow read: if isAuthenticated();
      // Only allow admins to create, update, or delete their own servers
      allow create: if isAuthenticated() && isAdmin();
      allow create, update, delete: if isAuthenticated() && isAdmin();
    }

    // Social Media Account Link Token rules
    match /socialMediaAccountLinkTokens/{userId} {
      // Users can only read their own token
      allow read: if isAuthenticated() && request.auth.uid == userId;
      // Only the backend can create/update tokens
      allow create, update: if false;
      // Users can delete their own token
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    match /ledger/{document=**} {
      allow read: if request.auth != null;  // Allow authenticated users to read
      allow create: if request.auth != null;  // Allow authenticated users to create
      allow update, delete: if false;  // No updates or deletes allowed
    }
  }
} 