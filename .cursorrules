# Cursor AI Rules for Sketch Music Project

## Project Overview
This is a Next.js 14+ project with TypeScript, Tailwind CSS, and Firebase integration. The project appears to be a music/social media platform with creator dashboards and campaign management.

## Code Style & Standards

### TypeScript
- Always use TypeScript with strict type checking
- Define proper interfaces and types for all data structures
- Use type assertions sparingly and prefer type guards
- Export types from dedicated type files when reused across components
- Use generic types when appropriate for reusable components

### React/Next.js
- Use functional components with hooks
- Prefer `"use client"` directive for client-side components
- Use Next.js 14+ app router patterns
- Implement proper error boundaries
- Use React.memo() for performance optimization when needed
- Always handle loading and error states

### Styling (Tailwind CSS)
- Use Tailwind CSS classes exclusively for styling
- Follow mobile-first responsive design
- Use semantic color names (primary, secondary, etc.) defined in config
- Always add hover states for interactive elements
- Use consistent spacing and sizing scales
- Add `hover:cursor-pointer` to all clickable elements
- Always give text elements a color like `text-gray-800` to avoid dark mode issues

### Component Structure
- Create reusable components in `src/components/`
- Use proper prop interfaces for all components
- Implement proper accessibility (aria-labels, semantic HTML)
- Add proper loading states and error handling
- Use consistent naming conventions (PascalCase for components)

### File Organization
- Keep components in `src/components/`
- Use `src/hooks/` for custom hooks
- Store types in `src/types/`
- Use `src/contexts/` for React contexts
- Keep utilities in `src/lib/` or `src/utils/`

## Firebase Integration
- Always handle Firebase authentication states properly
- Use proper error handling for Firebase operations
- Implement proper security rules
- Use Firebase SDK v9+ modular syntax
- Handle loading states for Firebase operations

## User Experience
- Always provide feedback for user actions (loading states, success/error messages)
- Implement proper form validation
- Use consistent UI patterns across the application
- Ensure responsive design works on all screen sizes
- Add proper keyboard navigation support

## Security
- Never expose sensitive data in client-side code
- Use environment variables for API keys and secrets
- Implement proper authentication checks
- Validate all user inputs
- Use proper CORS policies

## Performance
- Implement proper code splitting
- Use Next.js Image component for images
- Optimize bundle size
- Use proper caching strategies
- Implement lazy loading where appropriate

## Testing
- Write unit tests for utility functions
- Test component rendering and interactions
- Mock external dependencies properly
- Use proper test data and fixtures

## Accessibility
- Use semantic HTML elements
- Add proper ARIA labels and roles
- Ensure keyboard navigation works
- Maintain proper color contrast ratios
- Add alt text for images

## Code Quality
- Use ESLint and Prettier for code formatting
- Follow consistent naming conventions
- Add proper JSDoc comments for complex functions
- Keep functions small and focused
- Avoid code duplication

## Specific Project Rules
- Always handle the user authentication context properly
- Use the existing Firebase configuration
- Follow the existing component patterns (like CampaignCardReadOnly)
- Use the existing color scheme and design system
- Implement proper error handling for API calls
- Use the existing hook patterns (useCollection, useQuery, etc.)

## Database Patterns
- Use proper Firestore data modeling
- Implement proper indexing strategies
- Handle real-time updates appropriately
- Use transactions for critical operations
- Implement proper data validation

## API Integration
- Use proper HTTP status codes
- Implement proper error handling
- Use consistent API response formats
- Handle rate limiting appropriately
- Implement proper retry logic

## State Management
- Use React Context for global state
- Prefer local state when possible
- Use proper state update patterns
- Avoid prop drilling
- Implement proper state synchronization

## Error Handling
- Always catch and handle errors gracefully
- Provide meaningful error messages to users
- Log errors appropriately for debugging
- Implement proper fallback UI
- Use error boundaries for component errors 